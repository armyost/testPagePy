podTemplate(
	label: 'jenkins-pipeline',
        containers: [
    containerTemplate(
      name: 'jnlp',
      image: 'jenkinsci/jnlp-slave:3.10-1-alpine',
      args: '${computer.jnlpmac} ${computer.name}'
    ),
    containerTemplate(
      name: 'alpine',
      image: 'twistian/alpine:latest',
      command: 'cat',
      ttyEnabled: true
    ),
  ],
	volumes: [
		hostPathVolume(hostPath: "/var/run/docker.sock", mountPath: "/var/run/docker.sock")
	]
) 
{
	node('jenkins-pipeline') {
		stage("Get Source") {
			checkout scm
       		} 

		def props = readProperties  file:"deployment/pipeline.properties"
		def tag = props["version"]
		def dockerRegistry = props["dockerRegistry"]
		def credential_registry=props["credential_registry"]
		def image = props["image"]
		def deployment = props["deployment"]
		def service = props["service"]
		def ingress = props["ingress"]
		def selector_key = props["selector_key"]
		def selector_val = props["selector_val"]
		def namespace = props["namespace"]

		stage("Build Microservice image") {
			container("docker") {
				docker.withRegistry("${dockerRegistry}", "${credential_registry}") {
					sh "docker build -f ./deployment/Dockerfile -t ${image}:${tag} ."
					sh "docker push ${image}:${tag}"
					sh "docker tag ${image}:${tag} ${image}:latest"
					sh "docker push ${image}:latest"
				}
			}
		}
		stage( "Clean Up Existing Deployments" ) {
			container("kubectl") {
				sh "kubectl delete deployments -n ${namespace} --selector=${selector_key}=${selector_val}"
			}
		}

		stage( "Deploy to Cluster" ) {
			container("kubectl") {
				sh "kubectl apply -n ${namespace} -f ${deployment}"
				sh "sleep 5"
				sh "kubectl apply -n ${namespace} -f ${service}"
				sh "kubectl apply -n ${namespace} -f ${ingress}"
			}
		}

	}
}
