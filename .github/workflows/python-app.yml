# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]

permissions:
  contents: read
  id-token: write

env:
  BASE_BRANCH: "master"
  PROJECT_NAME: "testPagePy"
  PROJECT_ID: "00000"
  BUILD_PATH: "dist"
  MANIFEST_PATH: "deployment"
  APP_NAME: "sample-app"
  K8S_NAMESPACE: "sample-ns"
  GAR_LOCATION: "europe-west1-docker.pkg.dev/sample-prj-407212/sample-img-registry"
  REGION: "europe-west1"

jobs:
  source-code-build-job:
    runs-on: ubuntu-latest
    # configuration And Checkout
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{env.BASE_BRANCH}}
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    # Before build
    - name: Setup build environment
      run: |
        pwd

    # initailize
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Source Code Build
    - name: Build source codes
      run: |
        echo "Compiling the code..."  
        echo "Compile complete."

    # Unit test
    - name: Unit test
      run: |
        echo "Running unit tests... This will take about 60 seconds."
        sleep 2
        echo "Code coverage is 90%"

    # Quality Gate
    # - name: Quality Gate Check
    #   uses: dieuhd/sonar-quality-gate@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    #     GIT_URL: "https://api.github.com"
    #     GIT_TOKEN: ${{ secrets.GIT_TOKEN }} 
    #     SONAR_URL: ${{ secrets.SONAR_URL }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    #   with:
    #     login:  ${{ secrets.SONAR_TOKEN }}
    #     url: ${{ secrets.SONAR_URL }}
    #     projectKey: ${{ secrets.SONAR_PROJECT_KEY }}

    # After build
    - name: Move Application Artifact for distribute
      run: |
        pwd
        rsync -a ./app ./$BUILD_PATH/
    
    - name: Move DockerFile for distribute
      run: |
        pwd
        rsync -a Dockerfile ./$BUILD_PATH/

    - name: Make manifests
      run: |
        pwd    
    #     sed -i -e 's,TEMP_APP_ECR_IMAGE,'$AUSFRONT_ECR',g' app/deployment/frontend-application/aus-frontend.yaml
    #     sed -i -e 's,TEMP_APP_ECR_IMAGE,'$AUSBACKEND_ECR',g' deployment/backend-application/aus-backend.yaml
    #     sed -i -e 's,TEMP_APP_ECR_IMAGE,'$PMSFRONT_ECR',g' deployment/frontend-application/pms-frontend.yaml
    #     sed -i -e 's,TEMP_APP_ECR_IMAGE,'$PMSBACKEND_ECR',g' deployment/backend-application/pms-backend.yaml

    # Store artifacts
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
          name: dist-without-markdown
          path: |
            dist
            !dist/**/*.md
          retention-days: 5
    
    - name: Archive Manifests
      uses: actions/upload-artifact@v3
      with:
          name: deployement-without-markdown
          path: |
            deployement
          retention-days: 5

  build-image-job:
    needs: source-code-build-job
    runs-on: ubuntu-latest
    # DownLoad Artifact
    steps:
    - name: Download a application artifact
      uses: actions/download-artifact@v3
      with:
        name: dist-without-markdown

    - name: Show files downloaded
      run: |
        pwd
        ls -a
    
    # Option 1) GCP Login
    - name: Set up GCP Credential
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        # create_credentials_file: true
        # activate_credentials_file: true
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}

    # Option 2) Docker Repository Direct Login
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build and Push Image Artifact to Docker Repository
    - name: Build image
      run: docker build . --file DockerFile --tag ${{ env.GAR_LOCATION }}
      working-directory: WORKING_DIRECTORY

    - name: Push image
      run: docker push ${{ env.GAR_LOCATION }}

  deploy-job:
    needs: build-image-job
    runs-on: ubuntu-latest
    # DownLoad Artifact
    steps:
    - name: Download manifests
      uses: actions/download-artifact@v3
      with:
        name: deployement-without-markdown
    
    # Check Kubeconfig Setting for deploy
    # - name: Check Kubeconfig 
    #   uses: actions-hub/kubectl@master
    #   env: ${{ secrets.KUBE_CONFIG }}
    #   with:
        args: get pods -n $K8S_NAMESPACE
    
    # Deploy Manifests
    # - name: Deploy Manifests
    #   uses: actions-hub/kubectl@master
    #   env: ${{ secrets.KUBE_CONFIG }}
    #   with:
    #     args: apply -f $MANIFEST_PATH/deployment.yaml -n $K8S_NAMESPACE
      

    # - name: Run Application
    #   run: |
    #     ls ./*
    #     python ./run.py