# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]

permissions:
  contents: read
  id-token: write

env:
  BASE_BRANCH: "master"       # source code branch for pipeline
  APP_NAME: "sample-app"      # image name, application name
  K8S_NAMESPACE: "sample-ns"  # k8s-namespace
  BUILD_PATH: "dist"          # directory for distributing artifacts
  GAR_URL: "europe-west1-docker.pkg.dev/sample-prj-231220/sample-img-registry" # Image registry path
  REGION: "europe-west1"      # GCP location
  PYTHON_VERSION: "3.10"      # source code development kit version
  MANIFEST_PATH: "manifest"   # manifests directory path
  GKE_CLUSTER: "google-github-actions/get-gke-credentials"
  GKE_ZONE: "europe-west1"

jobs:
  source-code-build-job: # Build artifacts job
    runs-on: ubuntu-latest
    # Configuration and checkout
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{env.BASE_BRANCH}}
    - name: Set up Python version
      uses: actions/setup-python@v3
      with:
        python-version: ${{env.PYTHON_VERSION}}

    # Before build : Initialize environment, install dependency, fetch libraries
    - name: Setup build environment
      run: |
        echo "Setup build environment..."
        echo "Complete setting build environment."

    # Source code build
    - name: Build source codes
      run: |
        echo "Compiling the code..."  
        echo "Compile complete."

    # UnitTest
    - name: Unit test
      run: |
        echo "Running unit tests... This will take about 60 seconds." 
        echo "Unit tests complete."

    # QualityGate
    # - name: Quality Gate Check
    #   uses: dieuhd/sonar-quality-gate@v1
    #   env:
    #     SONAR_URL: ${{ secrets.SONAR_URL }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    #   with:
    #     login:  ${{ secrets.SONAR_TOKEN }}

    # Move artifacts to directory for distribute
    - name: Move Application Artifact for distribute
      run: |
        echo "Moving application artifacts..." 
        rsync -a ./app ./${{ env.BUILD_PATH }}/
        echo "Complete moving application artifacts." 
    
    - name: Move DockerFile for distribute
      run: |
        echo "Moving DockerFile..." 
        rsync -a Dockerfile ./${{ env.BUILD_PATH }}/
        echo "Complete moving DockerFile."

    - name: Make and Move Manifests for distribute
      run: |
        echo "Making k8s templates..." 
        sed -i -e 's,IMG_REGI,${{ env.GAR_URL }},g' manifest/deployment.yaml
        sed -i -e 's,APP_NAME,${{ env.APP_NAME }},g' manifest/deployment.yaml
        sed -i -e 's,APP_NAME,${{ env.APP_NAME }},g' manifest/service.yaml
        sed -i -e 's,APP_NAME,${{ env.APP_NAME }},g' manifest/ingress.yaml
        echo "Complete making k8s templates..."

        echo "Moving k8s template artifacts..."
        rsync -a ./app ./${{ env.BUILD_PATH }}/
        echo "Complete moving k8s template artifacts..."

    # Store artifacts
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
          name: dist-without-markdown
          path: |
            dist
            !dist/**/*.md
          retention-days: 5
    
    - name: Archive Manifests
      uses: actions/upload-artifact@v3
      with:
          name: manifest-without-markdown
          path: |
            manifest
            !manifest/**/*.md
          retention-days: 5

  build-image-job: # Build container image job
    needs: source-code-build-job
    runs-on: ubuntu-latest

    # DownLoad artifacts
    steps:
    - name: Download a application artifact
      uses: actions/download-artifact@v3
      with:
        name: dist-without-markdown

    - name: Show files downloaded
      run: |
        ls -a
    
    # GCP login
    - name: Set up GCP Credential
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}

    # Build and push image artifact to Docker repository
    - name: Build image
      run: docker build -f ./Dockerfile . --tag ${{ env.GAR_URL }}/${{ env.APP_NAME }}:latest
      working-directory: .

    - name: Push image
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
        docker push ${{ env.GAR_URL }}/${{ env.APP_NAME }}:latest

  deploy-job: # Deploy resources job
    needs: build-image-job
    runs-on: ubuntu-latest

    # DownLoad artifacts
    steps:
    - name: Download manifests
      uses: actions/download-artifact@v3
      with:
        name: manifest-without-markdown

    - name: Show files downloaded
      run: |
        ls -a

    # GCP login
    - name: Set up GCP Credential
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
        service_account: ${{ secrets.SERVICE_ACCOUNT }}  
  
    # Check kubeconfig setting for deploy
    - name: Check Kubeconfig 
      uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
            
    # Deploy manifests
    - name: Deploy Manifests
      uses: actions-hub/kubectl@master
      with:
        args: apply -f ./$MANIFEST_PATH -n ${{ env.K8S_NAMESPACE }}